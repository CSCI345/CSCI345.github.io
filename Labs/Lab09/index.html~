<!DOCTYPE HTML>
<!--
	Editorial by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
	<head>
		<title>Lab 09 | CSCI 150 (Fall 2019) | Oberlin College</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<!--[if lte IE 8]><script src="../../../../assets/js/ie/html5shiv.js"></script><![endif]-->
		<link rel="stylesheet" href="../../../../assets/css/main.css" />
		<!--[if lte IE 9]><link rel="stylesheet" href="../../../../assets/css/ie9.css" /><![endif]-->
		<!--[if lte IE 8]><link rel="stylesheet" href="../../../../assets/css/ie8.css" /><![endif]-->
	</head>
	<body>

		<!-- Wrapper -->
			<div id="wrapper">

				<!-- Main -->
					<div id="main">
						<div class="inner">

							<!-- Header -->
							<header id="header">
								<a href="../../index.html" class="logo"><strong>CSCI 150</strong>: Introduction to Computer Science (Fall 2019, Oberlin College)</a>
							</header>
							
							<section class="main">
                <header align="center">
									<h1>CSCI 150: Lab 9</h1>
									<p><strong>Scavenger
									Hunt!<br />Due:
									10PM
									on
									Tuesday,
									November 19th</strong></p>
								</header>
								
								<p>
                The purpose of this lab is to:
                <ul>
                	<li>Review recursion and other past topics
                	<li>Have fun!
                </ul>
                </p>
                
                <h2>Getting Started</h2>
                
                <p>
                Before you begin, please create a folder called <tt>lab9</tt> inside your <tt>cs150</tt> folder. This is where you should put all files made for this lab.
                </p>
                
                <p>
                This lab has 3 parts.  Completing one part successfully leads you the next.  Please remember to run handin after each part to make sure everything is submitted as you go along.  You may work with a single partner for all three parts.
                </p>
                
                <p>
                There are a few files you'll want for the various parts of this lab.  Save these three files to your <tt>lab9</tt> folder before you begin:
                </p>

		<ul>
			<li><a href="code.txt">code.txt</a></li>
			<li><a href="fruit.bmp">fruit.bmp</a></li>
			<li><a href="../../Code/picture2.py">picture2.py</a></li>
		</ul>
                
                <p>
                As a reminder, our six-step process for creating programs is as follows: 
                </p>
                
                <table>
                  <tbody>
                    <tr>
                      <td width="200px"><b>Describe:</b></td>
                      <td>Specify the problem you're trying to solve, as precisely as possible.</td>
                    </tr>
                    
                    <tr>
                      <td width="200px"><b>Understand:</b></td>
                      <td>Work through some examples.  This should help build intuition about the problem and hopefully suggest approaches to solving it.  You may discover your description of the problem from the previous step wasn't sufficiently precise.</td>
                    </tr>
                    
                    <tr>
                      <td width="200px"><b>Design:</b></td>
                      <td>Try to formalize the process you used to solve the examples above by writing it in pseudocode.  Think about whether this matches up with what you were actually doing.  Does it generate the same answers?  Can you think of cases in which your solution might not work? Spend some time thinking about how to break the code into logical functions (and later object) to make your code more readable and managable.</td>
                    </tr>
                    
                    <tr>
                      <td width="200px"><b>Implement:</b></td>
                      <td>Translate your pseudocode into real code.  Note that this is the first step that actually has you programming.  Don't try to implement everything at once.  Find the core function and get that working.  Then add additional features and functionality.</td>
                    </tr>
                    
                    <tr>
                      <td width="200px"><b>Test:</b></td>
                      <td>Check your program on the cases you worked by hand.  Check it on larger cases.  And test the components of your program as well -- as you program, test that the functions you've created behave as you expect.  Debugging and testing in a piecewise fashion is far easier than chasing down errors in a large program where all your code is suspect. </td>
                    </tr>
                
                    <tr>
                      <td width="200px"><b>Maintain:</b></td>
                      <td>Clean up your code and comment appropriately.  Typically in the course of writing a program, you'll add sloppy code just for the sake of testing other components.  That's fine, just get in the habit of fixing these pieces before you forget what they were doing.  And look for places you can tidy things up by making a more general function, removing unneccessary variables, making your variable names correspond to their meaning, removing debugging code, and adding comments.</td>
                    </tr>
                  </tbody>
                </table>
          
              </section>
              
              <section class="main">
                <h2>Part 1 - Syracuse</h2>
                
                <p>
                The Syracuse problem (also known variously as the 3x+1 problem, the <a href="http://www.xkcd.com/710/">Collatz Conjecture</a>, or Kakutani's problem) concerns a strange collection of sequences.  For every positive integer, there is a Syracuse sequence.  For example, Syracuse sequence 17 is
                </p>
                
                <p>
                <center>
                17 52 26 13 40 20 10 5 16 8 4 2 1
                </center>
                </p>
                
                <p>
                Can you see the pattern?  
                </p>
                
                <p>
                The Syracuse sequence for the number x is created by recursively applying the following function f, which returns one of two values depending on whether x is even or odd.  In particular, f(x) = 3x+1 if x is odd, and f(x) = x/2 if x is even.  Once f(x) is equal to 1, you stop (you could keep going, but at this point we'd just cycle between 4, 2 and 1, so generally we stop the sequence at 1).  As another example, Syracuse sequence 14 looks like
                </p>
                
                <p>
                <center>
                14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
                </center>
                </p>
                
                <p>
                Note that once we reach 17, the pattern is the same as the previous one.  No one knows whether all Syracuse sequences eventually reach 1.  In other words, it is possible that for some starting numbers, the corresponding Syracuse sequences never get to 1.  However, mathematicians have checked a few numbers, and at least the first quintillion (a billion billion) of them do make it to 1 eventually :)   
                </p>
                
                <p>
                Write a program called <tt>syracuse.py</tt>.  Create a recursive function <tt>rec(x)</tt> that takes in an integer <tt>x</tt> and returns an integer indicating the <u>number of elements</u> in the Syracuse sequence that begins with <tt>x</tt> (counting the starting number <tt>x</tt> and the final number 1).  So <tt>rec(4)</tt> should return 3, <tt>rec(17)</tt> should return 13, and <tt>rec(28)</tt> should return 19.  You may find it helpful to temporarily use print statements within your recursive function so you can see whether it is behaving as intended, but be sure to remove these once you get it working.
                </p>
                
                <p>
                <em>Important:</em> The function <tt>rec</tt> may only take in a single integer and may only return a single integer.  Do NOT use global variables (variables accessible in any function body).  Do NOT use loops within <tt>rec</tt>.
                </p>
                
                <p>
                Your program should begin by prompting the user for a sequence <em>length</em> (a positive integer).  Using a while loop and your <tt>rec</tt> function, find  the smallest starting integer x such that Syracuse sequence x has at least the requested length.  For example, the first 10 Syracuse sequences have lengths
                </p>
                
                <table border=1 cellpadding=2 cellspacing=0 width="400">
                        <tr><th align="center">Starting Value</th>
                            <td align="center" width="20">1</td>
                            <td align="center" width="20">2</td>
                            <td align="center" width="20">3</td>
                            <td align="center" width="20">4</td>
                            <td align="center" width="20">5</td>
                            <td align="center" width="20">6</td>
                            <td align="center" width="20">7</td>
                            <td align="center" width="20">8</td>
                            <td align="center" width="20">9</td>
                            <td align="center" width="20">10</td>
                        </tr>
                        <tr><th align="center">Sequence Length</td>
                            <td align="center">1</td>
                            <td align="center">2</td>
                            <td align="center">8</td>
                            <td align="center">3</td>
                            <td align="center">6</td>
                            <td align="center">9</td>
                            <td align="center">17</td>
                            <td align="center">4</td>
                            <td align="center">20</td>
                            <td align="center">7</td>
                        </tr>
                    </table>
                
                <p>
                So if the user entered 6, your program should print 3: the third Syracuse sequence is the first to have length at least 6.  Were the user to enter 15, your program should print 7, since all Syracuse sequences from one to six have lengths less than 15, while Syracuse sequence 7 has a length at least 15.     
                </p>
                
                <p>
                Find the smallest integer x whose Syracuse sequence contains at least 150 numbers.  In the lab url, replace the "index" in the web address of this page with the value of x to get to the next stage.  For example, if the correct answer was 12345 (it isn't), you'd go to <tt>http://cs.oberlin.edu/~ctaylor/classes/150F19/Labs/Lab09/12345.html</tt>
                </p>
              </section>
              
              <section class="main">
                <h2>Wrap Up</h2>
                
                <p>As with every lab, your last job prior to submission is to complete a brief write-up by <a href="https://forms.gle/tD8XmbLegQiACZeu7">filling out a Google Form</a>.</p>
                
                
          </section>
          
          <section class="main">
                
                <h2>Handin</h2>
                
                <p>
                As usual, you'll want to do a handin after each part of this lab, so refer back here as you finish subsequent parts.    
                </p>
                
                <p> You now just need to electronically handin all your files. As
                a reminder
                </p>
                
                <pre> 
                      <span class="typed">cd</span>             # changes to your home directory
                      <span class="typed">cd cs150</span>       # goes to your cs150 folder
                      <span class="typed">handin</span>         # starts the handin program
                                      # class is 150
                                      # assignment is 9
                                      # file/directory is lab9
                      <span class="typed">lshand</span>         # should show that you've handed in something
                </pre>
                
                <p> You can also specify the options to handin from the command
                line
                </p>
                
                <pre> 
                      <span class="typed">cd ~/cs150</span>     # goes to your cs150 folder
                      <span class="typed">handin -c 150 -a 9 lab9</span>
                </pre>

								
							</section>
						</div>
					</div>

				<!-- Sidebar -->
					<div id="sidebar">
						<div class="inner">

							<!-- Menu -->
								<nav id="menu">
									<header class="major">
										<h2>Menu</h2>
									</header>
									<ul>
										<li><a href="../../index.html">Course Info</a></li>
										<li><a href="../../schedule.html">Schedule</a></li>
										<li><a href="../../syllabus.html">Syllabus</a></li>
										<li><a href="../../handouts.html">Tips and Handouts</a></li>
										<li>
											<span class="opener">Labs</span>
											<ul>
                          <div id="labs"/>
											</ul>
										</li>
									</ul>
								</nav>

							<!-- Section -->
								<div id="contact"/>

							<!-- Footer -->
								<footer id="footer">
									<p class="copyright">&copy; 2019. Adam Eck. All rights reserved. <br/> Design: <a href="https://html5up.net">HTML5 UP</a>.</p>
								</footer>

						</div>
					</div>

			</div>

		<!-- Scripts -->
			<script src="../../../../assets/js/jquery.min.js"></script>
			<script src="../../../../assets/js/skel.min.js"></script>
			<script src="../../../../assets/js/util.js"></script>
			<!--[if lte IE 8]><script src="../../../../assets/js/ie/respond.min.js"></script><![endif]-->
			<script src="../../../../assets/js/main.js"></script>

                        <script>
                                $(function(){
                                        $("#labs").load("../../labs.html");
                                });
                        </script>
                        <script>
                                $(function(){
                                        $("#contact").load("../../contact.html");
                                });
                        </script>

	</body>
</html>
